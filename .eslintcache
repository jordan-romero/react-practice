[{"/Users/jordanromero/Development/code/postgrad/react-practice/src/index.js":"1","/Users/jordanromero/Development/code/postgrad/react-practice/src/components/Persons/Person/Person.js":"2","/Users/jordanromero/Development/code/postgrad/react-practice/src/containers/App.js":"3","/Users/jordanromero/Development/code/postgrad/react-practice/src/components/Persons/Persons.js":"4","/Users/jordanromero/Development/code/postgrad/react-practice/src/components/Cockpit/Cockpit.js":"5"},{"size":534,"mtime":1612376468740,"results":"6","hashOfConfig":"7"},{"size":672,"mtime":1612570738386,"results":"8","hashOfConfig":"7"},{"size":2946,"mtime":1612575321850,"results":"9","hashOfConfig":"7"},{"size":1587,"mtime":1612565183086,"results":"10","hashOfConfig":"7"},{"size":1182,"mtime":1612570716236,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uz21rx",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jordanromero/Development/code/postgrad/react-practice/src/index.js",[],"/Users/jordanromero/Development/code/postgrad/react-practice/src/components/Persons/Person/Person.js",[],"/Users/jordanromero/Development/code/postgrad/react-practice/src/containers/App.js",["23"],"import React, { Component } from 'react';\n\nimport classes from './App.module.css';\nimport Persons from '../components/Persons/Persons';\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport withClass from '../hoc/WithClass';\nimport Aux from '../hoc/Aux';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    console.log('[App.js] constructor');\n  }\n\n  state = {\n    persons: [\n      { id: 'asfa1', name: 'Max', age: 28 },\n      { id: 'vasdf1', name: 'Manu', age: 29 },\n      { id: 'asdf11', name: 'Stephanie', age: 26 }\n    ],\n    otherState: 'some other value',\n    showPersons: false,\n    showCockpit: true,\n    changeCounter: 0, \n  };\n\n  static getDerivedStateFromProps(props, state) {\n    console.log('[App.js] getDerivedStateFromProps', props);\n    return state;\n  }\n\n  // componentWillMount() {\n  //   console.log('[App.js] componentWillMount');\n  // }\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount');\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('[App.js] shouldComponentUpdate');\n    return true;\n  }\n\n  componentDidUpdate() {\n    console.log('[App.js] componentDidUpdate');\n  }\n\n  nameChangedHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n\n    // const person = Object.assign({}, this.state.persons[personIndex]);\n\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n\n    this.setState({ persons: persons, changeCounter:  });\n  };\n\n  deletePersonHandler = personIndex => {\n    // const persons = this.state.persons.slice();\n    const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({ persons: persons });\n  };\n\n  togglePersonsHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({ showPersons: !doesShow });\n  };\n\n  render() {\n    console.log('[App.js] render');\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = (\n        <Persons\n          persons={this.state.persons}\n          clicked={this.deletePersonHandler}\n          changed={this.nameChangedHandler}\n        />\n      );\n    }\n\n    return (\n      <Aux>\n        <button\n          onClick={() => {\n            this.setState({ showCockpit: false });\n          }}\n        >\n          Remove Cockpit\n        </button>\n        {this.state.showCockpit ? (\n          <Cockpit\n            title={this.props.appTitle}\n            showPersons={this.state.showPersons}\n            personsLength={this.state.persons.length}\n            clicked={this.togglePersonsHandler}\n          />\n        ) : null}\n        {persons}\n      </Aux>\n    );\n    // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?'));\n  }\n}\n\nexport default withClass(App, classes.App);\n","/Users/jordanromero/Development/code/postgrad/react-practice/src/components/Persons/Persons.js",[],"/Users/jordanromero/Development/code/postgrad/react-practice/src/components/Cockpit/Cockpit.js",[],{"ruleId":null,"fatal":true,"severity":2,"message":"24","line":65,"column":55},"Parsing error: Unexpected token\n\n  63 |     persons[personIndex] = person;\n  64 | \n> 65 |     this.setState({ persons: persons, changeCounter:  });\n     |                                                       ^\n  66 |   };\n  67 | \n  68 |   deletePersonHandler = personIndex => {"]